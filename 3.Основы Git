Создание локального Git-репозитория

I Вариант:
Создание репозитория в существующем каталоге
1. Переходим в каталоге
$ cd C:/Users/user/my_project

2.Инициализируем каталог
$ git init

Эта команда создаёт в текущем каталоге новый подкаталог с именем .git, содержащий все необходимые файлы репозитория — структуру Git репозитория.

3. Добавляем в индекс необходимые файлы
$ git add *.c       (добавили все с расширением *.с)
$ git add LICENSE   (добавили файл LICENSE)

4.Выполнили коммит
$ git commit -m 'Initial project version'

II Вариант
Клонирование существующего репозитория.
Для получения копии существующего Git-репозитория, например, проекта, в который вы хотите внести свой вклад, необходимо использовать команду git clone <url>.
$ git clone https://github.com/libgit2/libgit2

Для того, чтобы клонировать репозиторий в каталог с именем, отличающимся от libgit2, необходимо указать желаемое имя, как параметр командной строки:
$ git clone https://github.com/libgit2/libgit2 mylibgit


Запись изменений в репозиторий

1.Определение состояния файлов
$ git status
 упрощенный вывод состояния файлов:
$ git status -s иил $ git status --short

2.Добавить файл README в следующий коммит
$ git add README

3.Просмотр индексированных и неиндексированных изменений
$ git diff            дает понимание что вы изменили, но ещё не проиндексировали, и что вы проиндексировали и собираетесь включить в коммит. 
$ git diff --staged   команда сравнивает ваши проиндексированные изменения с последним коммитом:

4.Коммит изменений
$ git commit -m "свой коментарий" 
Опция -a  автоматически индексирует каждый уже отслеживаемый на момент коммита файл. Это удобно, но -a может включить в коммит нежелательные изменения. 
$ git commit -a -m "свой коментарий"

Удаление файлов
Чтобы удалить файл из Git, вам необходимо удалить его из отслеживаемых файлов
$ git rm
Можно удалять файлы, каталоги или шаблоны
$ git rm log/\*.log     -удаляет все файлы, имеющие расширение .log и находящиеся в каталоге log/.
$ git rm \*~            -удаляет все файлы, имена которых заканчиваются на ~.

Если хотите оставить файл на жёстком диске, но перестать отслеживать изменения в нём, то
$ git rm --cached README

Принудительной удаление,если файл изменен и уже проиндексирован
$ git rm -f 

Переименование файла
$ git mv file_from file_to

Операции отмены
Будьте осторожны, не все операции отмены в свою очередь можно отменить! 
Если вы сделали коммит слишком рано, например, забыв добавить какие-то файлы или комментарий к коммиту. 
Если вы хотите переделать коммит — внесите необходимые изменения, добавьте их в индекс и сделайте коммит ещё раз.

$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend

Отмена индексации файла,
Исключить файл из индекса 
git reset HEAD <file>…​

Отмена изменений в файле
Вернуть файл к тому состоянию, которое было в последнем коммите
$ git checkout -- <file>..."

Отмена действий с помощью git restore
Отмена индексации файла с помощью git restore
$ git restore --staged <file> …​

Откат измененного файла с помощью git restore
$ git restore <file>...

Игнорирование файлов
Создать файл .gitignore. с перечислением шаблонов соответствующих таким файлам.
К шаблонам в файле .gitignore применяются следующие правила:
-Пустые строки, а также строки, начинающиеся с #, игнорируются.
-Стандартные шаблоны являются глобальными и применяются рекурсивно для всего дерева каталогов.
-Чтобы избежать рекурсии используйте символ слеш (/) в начале шаблона.
-Чтобы исключить каталог добавьте слеш (/) в конец шаблона.
-Можно инвертировать шаблон, использовав восклицательный знак (!) в качестве первого символа.

Пример файла .gitignore:
# Исключить все файлы с расширение .a
*.a
# Но отслеживать файл lib.a даже если он подпадает под исключение выше
!lib.a
# Исключить файл TODO в корневом каталоге, но не файл в subdir/TODO
/TODO
# Игнорировать все файлы в каталоге build/
build/
# Игнорировать файл doc/notes.txt, но не файл doc/server/arch.txt
doc/*.txt
# Игнорировать все .txt файлы в каталоге doc/
doc/**/*.txt


Просмотр истории коммитов
