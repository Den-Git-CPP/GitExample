##Основы Git - Создание Git-репозитория
#Создание локального Git-репозитория

I Вариант:
Создание репозитория в существующем каталоге
1. Переходим в каталоге
$ cd C:/Users/user/my_project

2.Инициализируем каталог
$ git init

Эта команда создаёт в текущем каталоге новый подкаталог с именем .git, содержащий все необходимые файлы репозитория — структуру Git репозитория.

3. Добавляем в индекс необходимые файлы
$ git add *.c       (добавили все с расширением *.с)
$ git add LICENSE   (добавили файл LICENSE)

4.Выполнили коммит
$ git commit -m 'Initial project version'

II Вариант
Клонирование существующего репозитория.
Для получения копии существующего Git-репозитория, например, проекта, в который вы хотите внести свой вклад, необходимо использовать команду git clone <url>.
$ git clone https://github.com/libgit2/libgit2

Для того, чтобы клонировать репозиторий в каталог с именем, отличающимся от libgit2, необходимо указать желаемое имя, как параметр командной строки:
$ git clone https://github.com/libgit2/libgit2 mylibgit


#Запись изменений в репозиторий

1.Определение состояния файлов
$ git status
 упрощенный вывод состояния файлов:
$ git status -s иил $ git status --short

2.Добавить файл README в следующий коммит
$ git add README

3.Просмотр индексированных и неиндексированных изменений
$ git diff            дает понимание что вы изменили, но ещё не проиндексировали, и что вы проиндексировали и собираетесь включить в коммит. 
$ git diff --staged   команда сравнивает ваши проиндексированные изменения с последним коммитом:

4.Коммит изменений
$ git commit -m "свой коментарий" 
Опция -a  автоматически индексирует каждый уже отслеживаемый на момент коммита файл. Это удобно, но -a может включить в коммит нежелательные изменения. 
$ git commit -a -m "свой коментарий"

#Удаление файлов
Чтобы удалить файл из Git, вам необходимо удалить его из отслеживаемых файлов
$ git rm
Можно удалять файлы, каталоги или шаблоны
$ git rm log/\*.log     -удаляет все файлы, имеющие расширение .log и находящиеся в каталоге log/.
$ git rm \*~            -удаляет все файлы, имена которых заканчиваются на ~.

Если хотите оставить файл на жёстком диске, но перестать отслеживать изменения в нём, то
$ git rm --cached README

Принудительной удаление,если файл изменен и уже проиндексирован
$ git rm -f 

Переименование файла
$ git mv file_from file_to

#Операции отмены
Будьте осторожны, не все операции отмены в свою очередь можно отменить! 
Если вы сделали коммит слишком рано, например, забыв добавить какие-то файлы или комментарий к коммиту. 
Если вы хотите переделать коммит — внесите необходимые изменения, добавьте их в индекс и сделайте коммит ещё раз.

$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend

Отмена индексации файла,
Исключить файл из индекса 
git reset HEAD <file>…​

Отмена изменений в файле
Вернуть файл к тому состоянию, которое было в последнем коммите
$ git checkout -- <file>..."

Отмена действий с помощью git restore
Отмена индексации файла с помощью git restore
$ git restore --staged <file> …​

Откат измененного файла с помощью git restore
$ git restore <file>...

Игнорирование файлов
Создать файл .gitignore. с перечислением шаблонов соответствующих таким файлам.
К шаблонам в файле .gitignore применяются следующие правила:
-Пустые строки, а также строки, начинающиеся с #, игнорируются.
-Стандартные шаблоны являются глобальными и применяются рекурсивно для всего дерева каталогов.
-Чтобы избежать рекурсии используйте символ слеш (/) в начале шаблона.
-Чтобы исключить каталог добавьте слеш (/) в конец шаблона.
-Можно инвертировать шаблон, использовав восклицательный знак (!) в качестве первого символа.

Пример файла .gitignore:
# Исключить все файлы с расширение .a
*.a
# Но отслеживать файл lib.a даже если он подпадает под исключение выше
!lib.a
# Исключить файл TODO в корневом каталоге, но не файл в subdir/TODO
/TODO
# Игнорировать все файлы в каталоге build/
build/
# Игнорировать файл doc/notes.txt, но не файл doc/server/arch.txt
doc/*.txt
# Игнорировать все .txt файлы в каталоге doc/
doc/**/*.txt


#Просмотр истории коммитов
$ git log перечисляет коммиты, сделанные в репозитории в обратном к хронологическому порядке — последние коммиты находятся вверху.

$ git log -p -2
-p или --patch который показывает разницу (выводит патч), внесенную в каждый коммит.
-2 для вывода только двух записей
--stat          Показывает статистику измененных файлов для каждого коммита.

$ git log --pretty
--pretty меняет формат вывода 
    oneline каждый коммит в одну строку
    short, full и fuller с меньшим или большим количеством информации соответственн

$ git log --pretty=format:"%h - %an, %ar : %s"
format: позволяет указать формат для вывода информации с опциями
%H Хеш коммита
%h Сокращенный хеш коммита
%T Хеш дерева
%t Сокращенный хеш дерева
%P Хеш родителей
%p Сокращенный хеш родителей
%an Имя автора
%ae Электронная почта автора
%ad Дата автора (формат даты можно задать опцией --date=option)
%ar Относительная дата автора
%cn Имя коммитера
%ce Электронная почта коммитера
%cd Дата коммитера
%cr Относительная дата коммитера
%s Содержание

--shortstat     Отображает только строку с количеством изменений/вставок/удалений для команды --stat.
--name-only     Показывает список измененных файлов после информации о коммите.
--name-status   Показывает список файлов, которые добавлены/изменены/удалены.
--abbrev-commit Показывает только несколько символов SHA-1 чек-суммы вместо всех 40.
--relative-date Отображает дату в относительном формате (например, «2 weeks ago») вместо стандартного формата даты.
--graph         Отображает ASCII граф с ветвлениями и историей слияний.
--oneline       Сокращение для одновременного использования опций --pretty=oneline --abbrev-commit.

#Ограничение вывода
-(n)                Показывает только последние n коммитов.
--since, --after    Показывает только те коммиты, которые были сделаны после указанной даты.
$ git log --since=2.weeks
--until, --before   Показывает только те коммиты, которые были сделаны до указанной даты.
--author    фильтр по автору коммита
--committer         Показывает только те коммиты, в которых запись committer совпадает с указанной строкой.
--grep      фильтр по ключевым словам в сообщении коммита.
$ git log -S function_name
-S          фильтр показывает только те коммиты, в которых изменение в коде повлекло за собой добавление или удаление этой строки
Возможно применение для более тонкой сортировки такакя команда
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/

#Операции отмены
Если вы сделали коммит и поняли, что забыли проиндексировать изменения в файле, который хотели добавить в коммит, то
$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend
второй коммит заменит результаты первого.

#Отмена индексации файла
$ git reset HEAD <file>…​ для исключения из индекса.

#Откат измененного файла с помощью git restore
$ git restore <file>...
git restore <file> — опасная команда. Любые локальные изменения, внесенные в этот файл/ Никогда не используйте эту команду, если точно не знаете, нужны ли вам эти несохраненные локальные изменения.

#Просмотр удалённых репозиториев
$ git remote    просмотреть список настроенных удалённых репозиториев
$ git remote -v просмотреть адреса для чтения и записи, привязанные к репозиторию

#Добавление удалённых репозиториев
$ git remote add <shortname> <url>

#Получение изменений из удалённого репозитория 
$ git fetch [remote-name]
команда git fetch забирает данные в ваш локальный репозиторий, но не сливает их с какими-либо вашими наработками и не модифицирует то, над чем вы работаете в данный момент. Вам необходимо вручную слить эти данные с вашими, когда вы будете готовы.
Если ветка настроена на отслеживание удалённой ветки git pull чтобы автоматически получить изменения из удалённой ветки и слить их со своей текущей.

#Отправка изменений в удаленный репозиторий
$ git push <remote-name> <branch-name>

$ git push origin master
Чтобы отправить вашу ветку master на сервер origin 

#Просмотр удаленного репозитория
& git remote show <remote>

#Удаление и переименование удалённых репозиториев
Переименования удалённого репозитория pb в paul
$ git remote rename pb paul
$ git remote
удалить удаленный репозиторий
$ git remote remove paul
$ git remote

#Работа с тегами
Git имеет возможность помечать определённые моменты в истории как важные
Просмотр списка тегов
$ git tag
Создание тегов (рекомендуется создавать аннотированные теги)
$ git tag -a v1.4 -m "my version 1.4"
-a версия
-m сообщение
$ git show v1.4 - покажет данные тега

Легковесные теги
Для создания легковесного тега не передавайте опций -a, -s и -m, укажите только название:
$ git tag v1.4-lw
$ git tag
$ git show v1.4 - покажет данные тега

git push не отправляет теги на удалённые сервера. 
теги нужно отправлять явно на удалённый сервер
$ git push origin <tagname>
 Пример
$ git push origin v1.5
отправить все теги за один раз
$ git push origin --tags
Удаление тегов
$ git tag -d <tagname>
Пример
$ git tag -d v1.4-lw
При удалении тега не происходит его удаления с внешних серверов.
Существует два способа удалить:
I. $ git push <remote> :refs/tags/<tagname>
Пример $ git push origin :refs/tags/v1.4-lw
II. $ git push origin --delete <tagname>

#Псевдонимы в Git
Если вы не хотите печатать каждую команду для Git целиком вы легко можете настроить псевдонимы (alias) для любой команды с помощью git config.
Несколько примеров псевдонимов
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
Теперь вместо ввода git commit, вам достаточно набрать только git ci. 
