Тренажер:
1.Введение 
Уровень 3 git merge
$ git checkout -b bugFix     //Создали ветку, переключились в нее
$ git commit                 //Сделали коммит
$ git checkout main          //перешли в main
$ git commit                 //Сделали коммит
$ git merge bugFix           //Слияние bugFix в main
и наоборот смержить main в bugFix
$ git checkout bugFix 
$ git merge main 

Уровень 4 git rebase
$ git checkout -b bugFix     //Создали ветку, переключились в нее
$ git commit                 //Сделали коммит
$ git checkout main          //перешли в main
$ git commit                 //Сделали коммит
$ git checkout bugFix        //переключились в bugFix
$ git rebase main           //Слияние bugFix в main

2.Едем дальше 
Уровень 1 HEAD 
$ git checkout С1        //переключили HEAD в коммит С1

Уровень 2 Относительные ссылки
Перемещение на один коммит назад ^

$ git checkout main^
 main^ означает "первый родитель ветки main"
 main^^ означает прародитель (родитель родителя) main
можно использовать HEAD^ как относителную ссылку
$ git checkout bugFix^      //перейти на родителя bugFix
Перемещение на несколько коммитов назад ~<num>
$ git checkout HEAD~4       //перейти на 4 коммит вверх

Уровень 3
Перемещение ветки (branch forcing)
Одна из наиболее распространённых целей, для которых используются относительные ссылки - это перемещение веток. 
Можно напрямую прикрепить ветку к коммиту при помощи опции -f. Например, команда:
git branch -f main HEAD~3
переместит (принудительно) ветку main на три родителя назад от HEAD.

Уровень 4
Отмена изменений в Git
Два основных способа
git reset 
git reset HEAD~1 *//отменяет изменения, перенося ссылку на ветку назад, на более старый коммит

git revert 
git revert HEAD //отменить изменения и поделиться отменёнными изменениями с остальными

последовательность
git checkout bugFix // перейти в ветку bugFix
git revert HEAD //отменить изменения и поделиться отменёнными изменениями с остальными

3.Перемещаем труды туда-сюда 



