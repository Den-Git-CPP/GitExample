#Создание новой ветки
$ git branch 
Команда git branch только создаёт новую ветку, но не переключает на неё.
Команда 
$ git log --oneline --decorate  
покажет вам куда указывают указатели веток

Переключение ветку testing (HEAD переместится на ветку testing.)
$ git checkout testing

Как правило, при создании новой ветки сразу на неё переключиться
$ git checkout -b <newbranchname>.

с Git версии 2.23 можно использовать git switch вместо git checkout
Переключиться на существующую ветку
$ git switch testing-branch 
Создать новую ветку и переключиться на нее
$ git switch -c new-branch
Вернуться к предыдущей извлечённой ветке: 
$ git switch -

Управление ветками
git branch делает несколько больше, чем просто создаёт и удаляет ветки.  При запуске без параметров, вы получите простой список имеющихся у вас веток.
символ * указывает HEAD
Чтобы посмотреть последний коммит на каждой из веток
$ git branch -v

Чтобы посмотреть те ветки, которые вы уже слили с текущей
$ git branch --merged
Чтобы увидеть все ветки, содержащие наработки, которые вы пока ещё не слили в текущую ветку
$ git branch --no-merged

#Переименование ветки
Переименование ветки локально с помощью команды git branch --move
$ git branch --move bad-branch-name corrected-branch-name

Чтобы все остальные увидели исправленную ветку в удалённом репозитории
$ git push --set-upstream origin corrected-branch-name

Старую ветку удалить с помощью команды:
$ git push origin --delete bad-branch-name

#Ветвление в Git - Удалённые ветками
$ git ls-remote <remote> полный список удалённых ссылок  
$ git remote show <remote> для получения удалённых веток и дополнительной информации.
$ git fetch <remote> синхронизации ваших изменений с удаленным сервером <remote>

#Отправка изменений
Команда $ git push <remote> <branch>
Пример  $ git push origin serverfix

Если вы не хотите, чтобы на удалённом сервере ветка называлась serverfix, то выполните 
$ git push origin serverfix:awesomebranch 
это отправит локальную ветку serverfix в ветку awesomebranch удалённого репозитория.
Чтобы слить эти наработки в свою текущую рабочую ветку, выполните 
$ git merge origin/serverfix
Если вам нужна локальная ветка serverfix, в которой вы сможете работать,то
$ git checkout -b serverfix origin/serverfix
Это даст вам локальную ветку, в которой можно работать и которая будет начинаться там же, где и origin/serverfix.
сокращенная команда
$ git checkout --track origin/serverfix

#Отслеживание веток
Получение локальной ветки из удалённой ветки автоматически создаёт то, что называется «веткой слежения» 
$ git checkout --track origin/serverfix
Чтобы создать локальную ветку с именем, отличным от имени удалённой ветки, просто укажите другое имя:
$ git checkout -b sf origin/serverfix
Теперь ваша локальная ветка sf будет автоматически получать изменения из origin/serverfix.
Если у вас уже есть локальная ветка и вы хотите настроить ее на слежение за удалённой веткой
$ git branch -u origin/serverfix
Если вы хотите посмотреть как у вас настроены ветки слежения
$ git branch -vv

Если вы хотите иметь актуальную информацию,вам необходимо получить данные со всех ваших удалённых серверов перед запуском команды
$ git fetch --all; git branch -vv

#Получение изменений
Получает с сервера все изменения, которых у вас ещё нет, но не изменяет состояние вашей рабочей копии. 
(просто получает данные и позволяет вам самостоятельно сделать слияние)
$ git fetch 

$ git pull -большинстве случаев является командой git fetch, за которой непосредственно следует команда git merge.
Лучше явно использовать команды fetch и merge, поскольку git pull может часто сбивать с толку.

#Удаление веток на удалённом сервере
Удаления ветки serverfix на сервере
$ git push origin --delete serverfix
Удаляет указатель на сервере, легко можно восстановить до работы сборщика мусора

